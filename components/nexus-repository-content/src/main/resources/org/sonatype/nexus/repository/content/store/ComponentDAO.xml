<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2008-present Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${namespace}">

  <insert id="createSchema">
    --
    -- each format has a component table which they can extend
    --
    CREATE TABLE IF NOT EXISTS ${format}_component (
      component_id  INT GENERATED BY DEFAULT AS IDENTITY,
      repository_id INT NOT NULL,
      namespace     VARCHAR NOT NULL,
      name          VARCHAR NOT NULL,
      kind          VARCHAR NOT NULL,
      version       VARCHAR NOT NULL,
      normalized_version VARCHAR,
      attributes    ${JSON_TYPE} NOT NULL,
      created       TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
      last_updated  TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,

      CONSTRAINT pk_${format}_component_id PRIMARY KEY (component_id),
      CONSTRAINT uk_${format}_component_coordinate UNIQUE (repository_id, namespace, name, version),

      CONSTRAINT fk_${format}_component_repository FOREIGN KEY (repository_id)
         REFERENCES ${format}_content_repository (repository_id)
    );

    CREATE INDEX IF NOT EXISTS idx_${format}_component_kind ON ${format}_component (kind);

    --Note: adding create clause for clarity , the alter clause will be executed when
    -- the table already exists whilst the definiton on the create table will be executed when creating the table
    ALTER TABLE ${format}_component ADD COLUMN IF NOT EXISTS normalized_version VARCHAR;
    CREATE INDEX IF NOT EXISTS idx_${format}_normalized_version ON  ${format}_component (normalized_version);
    <if test="_databaseId == 'PostgreSQL'">
      --Note: added conditional alter clause to add a not null constraint in case
      --the table has its normalized_version populated
      <![CDATA[
      DO $$
        BEGIN
          IF NOT EXISTS (SELECT 1 FROM ${format}_component WHERE normalized_version IS NULL) THEN
            ALTER TABLE ${format}_component ALTER COLUMN normalized_version SET NOT NULL;
          END IF;
        END $$;
      ]]>
    </if>

    --Note: index intentionally not added because this column is intended to be used
    -- with the component_id which is indexed
    ALTER TABLE ${format}_component ADD COLUMN IF NOT EXISTS entity_version INT;

    <!-- Performance optimisation for cleanup -->
    CREATE INDEX IF NOT EXISTS idx_${format}_component_set ON ${format}_component (repository_id, namespace, name);
  </insert>

  <sql id="componentNamespaceMatch">
    ${format}_component.repository_id = #{repositoryId} AND ${format}_component.namespace = #{namespace}
  </sql>

  <sql id="componentSetMatch">
    <include refid="componentNamespaceMatch"/> AND ${format}_component.name = #{name}
  </sql>

  <sql id="componentCoordinateMatch">
    <include refid="componentNamespaceMatch"/> AND name = #{name} AND version = #{version}
  </sql>

  <sql id="componentMatch">
    <choose>
      <when test="componentId != null">
        component_id = #{componentId}
      </when>
      <otherwise>
        <include refid="componentCoordinateMatch"/>
      </otherwise>
    </choose>
  </sql>

  <sql id="selectComponentsBySet">
    SELECT * FROM ${format}_component WHERE <include refid="componentSetMatch"/>
    <if test="continuationToken != null"> AND component_id > #{continuationToken}</if>
    ORDER BY component_id
    <if test="limit > 0"> LIMIT #{limit}</if>;
  </sql>

  <select id="countComponents" resultType="int">
    SELECT COUNT(*) FROM ${format}_component WHERE repository_id = #{repositoryId}
        <if test="kind != null"> AND kind = #{kind}</if>
        <if test="filter != null"> AND (${filter})</if>;
  </select>

  <select id="countComponentsWithAssetsBlobs" resultType="int">
    SELECT COUNT(DISTINCT component_id) FROM ${format}_asset
    WHERE asset_blob_id IS NOT NULL AND repository_id = #{repositoryId}
    <if test="kind != null"> AND kind = #{kind}</if>
    <if test="filter != null"> AND (${filter})</if>;
  </select>

  <select id="countUnnormalized" resultType="int">
    SELECT COUNT(component_id) FROM ${format}_component WHERE normalized_version IS NULL;
  </select>

  <select id="browseComponents" resultType="ComponentData">
    SELECT * FROM ${format}_component WHERE repository_id = #{repositoryId}
        <if test="continuationToken != null"> AND component_id > #{continuationToken}</if>
        <if test="kind != null"> AND kind = #{kind}</if>
        <if test="filter != null"> AND (${filter})</if>
    ORDER BY component_id LIMIT #{limit};
  </select>

  <select id="browseUnnormalized" resultType="ComponentData">
    SELECT * FROM ${format}_component WHERE normalized_version IS NULL
    <if test="continuationToken != null"> AND component_id > #{continuationToken}</if>
    ORDER BY component_id LIMIT #{limit};
  </select>

  <resultMap id="ComponentDataMap" type="ComponentData">
    <id property="componentId" column="component_id"/>
    <result property="namespace" column="namespace" />
    <result property="name" column="name" />
    <result property="kind" column="kind" />
    <result property="version" column="version" />
    <result property="normalizedVersion" column="normalized_version"/>
    <result property="attributes" column="attributes"/>
    <result property="created" column="created"/>
    <result property="lastUpdated" column="last_updated"/>
  </resultMap>

  <!--resultMap to obtain components using a custom order (orderedToken) -->
  <resultMap id="OrderedComponentDataMap"
             type="org.sonatype.nexus.repository.content.store.OrderedComponentData"
             extends="ComponentDataMap">
    <result property="orderedToken" column="orderedToken"/>
  </resultMap>

  <resultMap id="ComponentAssetsDataMap"
             type="org.sonatype.nexus.repository.content.store.ComponentData"
             extends="ComponentDataMap">
    <!--    collections of assets     -->
    <collection property="assets"
                javaType="List"
                ofType="org.sonatype.nexus.repository.content.store.AssetData"
                notNullColumn="asset_id">
      <id property="assetId" column="asset_id"/>
      <result property="path" column="path"/>
      <result property="kind" column="kind"/>
      <result property="componentId" column="component_id"/>
      <result property="assetBlobId" column="asset_blob_id"/>
      <result property="lastDownloaded" column="last_downloaded"/>
      <result property="attributes" column="attributes"/>
      <result property="created" column="created"/>
      <result property="lastUpdated" column="last_updated"/>
      <result property="blobStoreName" column="blob_store_name"/>
      <result property="assetBlobSize" column="asset_blob_size"/>
    </collection>
  </resultMap>

  <!--resultMap to obtain component with assets using a custom order (orderedToken) -->
  <resultMap id="OrderedComponentAssetsDataMap"
             type="org.sonatype.nexus.repository.content.store.OrderedComponentData"
             extends="ComponentAssetsDataMap">
    <result property="orderedToken" column="orderedToken" />
  </resultMap>

  <select id="browseComponentsEager"
          resultType="org.sonatype.nexus.repository.content.store.ComponentData"
          resultMap="ComponentAssetsDataMap">
    WITH componentIds AS (
        SELECT component_id FROM ${format}_component
        WHERE repository_id IN
        <foreach item="repositoryId" index="index" collection="repositoryIds"
                 open="(" separator="," close=")">
          #{repositoryId}
        </foreach>
        <if test="continuationToken != null"> AND component_id > #{continuationToken}</if>
        <if test="kind != null"> AND kind = #{kind}</if>
        <if test="filter != null"> AND (${filter})</if>
        ORDER BY component_id
        LIMIT #{limit}
    )
    SELECT
        component.*, asset.*
    FROM ${format}_component AS component
    LEFT JOIN ${format}_asset AS asset ON component.component_id = asset.component_id
    WHERE component.component_id IN (select component_id from componentIds)
    ORDER BY component.component_id
  </select>

  <select id="browseComponentsInRepositories" resultType="ComponentData">
    SELECT * FROM ${format}_component
    WHERE repository_id IN
    <foreach item="repositoryId" index="index" collection="repositoryIds"
             open="(" separator="," close=")">
      #{repositoryId}
    </foreach>
    <if test="continuationToken != null"> AND component_id > #{continuationToken}</if>
    ORDER BY component_id LIMIT #{limit};
  </select>

  <select id="browseComponentsBySet" resultType="ComponentData">
    <include refid="selectComponentsBySet"/>
  </select>

  <select id="browseNamespaces" resultType="String">
    SELECT DISTINCT(namespace) FROM ${format}_component WHERE repository_id = #{repositoryId};
  </select>

  <select id="browseNames" resultType="String">
    SELECT DISTINCT(name) FROM ${format}_component WHERE <include refid="componentNamespaceMatch"/>;
  </select>

  <select id="browseVersions" resultType="String">
    SELECT version FROM ${format}_component WHERE <include refid="componentNamespaceMatch"/> AND name = #{name};
  </select>

  <select id="browseSets" resultType="org.sonatype.nexus.repository.content.store.ComponentSetData">
    SELECT DISTINCT namespace, name FROM ${format}_component WHERE repository_id = #{repositoryId}
    <if test="continuationToken != null"> AND CONCAT(namespace, '|', name) > #{continuationToken}</if>
    ORDER BY namespace ASC, name ASC
    <if test="limit > 0"> LIMIT #{limit}</if>
  </select>

  <insert id="createComponent" useGeneratedKeys="true" keyProperty="component.componentId">
    INSERT INTO ${format}_component (repository_id, namespace, name, kind, version, normalized_version, attributes
    <if test="entityVersionEnabled">, entity_version</if>
    ) VALUES (#{component.repositoryId}, #{component.namespace}, #{component.name},
    #{component.kind}, #{component.version}, #{component.normalizedVersion}, #{component.attributes}
    <if test="entityVersionEnabled">, 1</if>
    );
  </insert>

  <select id="readComponent" resultType="ComponentData">
    SELECT * FROM ${format}_component WHERE <include refid="componentMatch"/>;
  </select>

  <select id="readCoordinate" resultType="ComponentData">
    SELECT * FROM ${format}_component WHERE <include refid="componentCoordinateMatch"/>;
  </select>

  <update id="updateComponentKind">
    <bind name="repositoryId" value="component.repositoryId"/>
    <bind name="componentId" value="component.componentId"/>
    <bind name="namespace" value="component.namespace"/>
    <bind name="name" value="component.name"/>
    <bind name="version" value="component.version"/>
    <bind name="kind" value="component.kind"/>

    UPDATE ${format}_component SET
        kind = #{kind},
        last_updated = CURRENT_TIMESTAMP
        <if test="entityVersionEnabled">, entity_version = COALESCE(entity_version, 1) + 1</if>
        WHERE <include refid="componentMatch"/> AND kind != #{kind};
  </update>

  <update id="updateComponentNormalizedVersion">
    <bind name="componentId" value="component.componentId"/>
    <bind name="namespace" value="component.namespace"/>
    <bind name="name" value="component.name"/>
    <bind name="version" value="component.version"/>
    <bind name="normalized_version" value="component.normalizedVersion"/>

    UPDATE ${format}_component SET
    normalized_version = #{normalized_version},
    last_updated = CURRENT_TIMESTAMP
    <if test="entityVersionEnabled">, entity_version = COALESCE(entity_version, 1) + 1</if>
    WHERE <include refid="componentMatch"/>;
  </update>

  <select id="readComponentAttributes" resultType="NestedAttributesMap">
    SELECT attributes FROM ${format}_component WHERE <include refid="componentMatch"/>;
  </select>

  <update id="updateComponentAttributes">
    <bind name="repositoryId" value="component.repositoryId"/>
    <bind name="componentId" value="component.componentId"/>
    <bind name="namespace" value="component.namespace"/>
    <bind name="name" value="component.name"/>
    <bind name="version" value="component.version"/>
    <bind name="attributes" value="component.attributes"/>

    UPDATE ${format}_component SET
        attributes = #{component.attributes},
        last_updated = CURRENT_TIMESTAMP
        <if test="entityVersionEnabled">, entity_version = COALESCE(entity_version, 1) + 1</if>
        WHERE <include refid="componentMatch"/> AND attributes != #{attributes};
  </update>

  <delete id="deleteComponent" parameterType="ComponentData">
    DELETE FROM ${format}_component WHERE <include refid="componentMatch" />;
  </delete>

  <delete id="deleteComponents">
    DELETE FROM ${format}_component WHERE repository_id = #{repositoryId}<if test="limit gt 0"> LIMIT #{limit}</if>;
  </delete>

  <delete id="deleteComponents" databaseId="PostgreSQL">
    DELETE FROM ${format}_component WHERE
        <if test="limit gt 0"> component_id IN (SELECT component_id FROM ${format}_component WHERE </if>
        repository_id = #{repositoryId}
        <if test="limit gt 0"> LIMIT #{limit})</if>;
  </delete>

  <select id="selectNotRecentlyDownloaded" resultType="int">
    SELECT component_id FROM ${format}_asset
        WHERE repository_id = #{repositoryId} AND component_id IS NOT NULL
    GROUP BY component_id
        HAVING MAX(last_downloaded) &lt;= CURRENT_TIMESTAMP - CAST(#{daysAgo} AS INT) * INTERVAL '1' DAY
        <if test="limit gt 0"> LIMIT #{limit}</if>;
  </select>

  <delete id="purgeSelectedComponents">
    DELETE FROM ${format}_asset WHERE component_id = ANY(#{componentIds});
    DELETE FROM ${format}_component WHERE component_id = ANY(#{componentIds});
  </delete>

  <delete id="purgeSelectedComponents" databaseId="PostgreSQL">
    DELETE FROM ${format}_asset WHERE component_id = ANY(#{componentIds}::int[]);
    DELETE FROM ${format}_component WHERE component_id = ANY(#{componentIds}::int[]);
  </delete>

</mapper>
