<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2008-present Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${namespace}">

  <insert id="createSchema">
    --
    -- each format has an asset table which they can extend
    --
    CREATE TABLE IF NOT EXISTS ${format}_asset (
      asset_id        INT GENERATED BY DEFAULT AS IDENTITY,
      repository_id   INT NOT NULL,
      path            VARCHAR NOT NULL,
      kind            VARCHAR NOT NULL,
      component_id    INT,
      asset_blob_id   INT,
      last_downloaded TIMESTAMP WITH TIME ZONE,
      attributes      ${JSON_TYPE} NOT NULL,
      created         TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
      last_updated    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
      asset_blob_size BIGINT,

      CONSTRAINT pk_${format}_asset_id PRIMARY KEY (asset_id),
      CONSTRAINT uk_${format}_asset_repository_path UNIQUE (repository_id, path),

      CONSTRAINT fk_${format}_asset_repository FOREIGN KEY (repository_id)
         REFERENCES ${format}_content_repository (repository_id),
      CONSTRAINT fk_${format}_asset_component FOREIGN KEY (component_id)
         REFERENCES ${format}_component (component_id),
      CONSTRAINT fk_${format}_asset_blob FOREIGN KEY (asset_blob_id)
         REFERENCES ${format}_asset_blob (asset_blob_id)
    );

    CREATE INDEX IF NOT EXISTS idx_${format}_asset_kind ON ${format}_asset (kind);
    CREATE INDEX IF NOT EXISTS idx_${format}_asset_component ON ${format}_asset (component_id);
    CREATE INDEX IF NOT EXISTS idx_${format}_asset_blob ON ${format}_asset (asset_blob_id);

    <!-- Performance optimisation for cleanup -->
    CREATE INDEX IF NOT EXISTS idx_${format}_asset_last_downloaded ON ${format}_asset (last_downloaded);
    CREATE INDEX IF NOT EXISTS idx_${format}_asset_path ON ${format}_asset (path);

    ALTER TABLE ${format}_asset ADD COLUMN IF NOT EXISTS asset_blob_size BIGINT;

    --
  </insert>

  <sql id="assetPathMatch">
    repository_id = #{repositoryId} AND path = #{path}
  </sql>

  <sql id="assetMatch">
    <choose>
      <when test="assetId != null">
        asset_id = #{assetId}
      </when>
      <otherwise>
        <include refid="assetPathMatch"/>
      </otherwise>
    </choose>
  </sql>

  <sql id="componentCoordinateMatch">
    C.repository_id = #{repositoryId}
        AND namespace = #{namespace} AND name = #{name} AND version = #{version}
  </sql>

  <resultMap id="assetResult" type="AssetData">
    <result property="assetBlobId" column="asset_blob_id"/>
    <result property="componentId" column="component_id" />
    <association property="component" column="component_id" select="fetchComponent" fetchType="lazy"/>
    <association property="assetBlob" column="asset_blob_id" select="fetchAssetBlob" fetchType="lazy"/>
  </resultMap>

  <resultMap id="assetResultMap" type="AssetData">
    <id property="assetId" column="asset_id"/>
    <result property="path" column="path"/>
    <result property="kind" column="kind" />
    <result property="componentId" column="component_id" />
    <result property="assetBlobId" column="asset_blob_id"/>
    <result property="lastDownloaded" column="last_downloaded"/>
    <result property="attributes" column="attributes"/>
    <result property="created" column="created"/>
    <result property="lastUpdated" column="last_updated"/>
    <association property="component" resultMap="ComponentDataResult"/>
    <association property="assetBlob" resultMap="AssetBlobResult"/>
  </resultMap>

  <resultMap id="ComponentDataResult" type="ComponentData">
    <id property="componentId" column="component_id"/>
    <result property="namespace" column="namespace" />
    <result property="name" column="name" />
    <result property="kind" column="kind" />
    <result property="version" column="version" />
    <result property="attributes" column="attributes"/>
    <result property="created" column="created"/>
    <result property="lastUpdated" column="last_updated"/>
  </resultMap>

  <resultMap id="AssetBlobResult" type="AssetBlobData">
    <id property="assetBlobId" column="asset_blob_id"/>
    <result property="blobRef" column="blob_ref" />
    <result property="blobSize" column="blob_size" />
    <result property="contentType" column="content_type" />
    <result property="checksums" column="checksums" />
    <result property="blobCreated" column="blob_created" />
    <result property="createdBy" column="created_by" />
    <result property="createdByIp" column="created_by_ip" />
    <result property="addedToRepository" column="added_to_repository" />
  </resultMap>

  <select id="fetchComponent" resultType="ComponentData">
    SELECT * FROM ${format}_component WHERE component_id = #{component_id}
  </select>

  <select id="fetchAssetBlob" resultType="AssetBlobData">
    SELECT * FROM ${format}_asset_blob WHERE asset_blob_id = #{asset_blob_id}
  </select>

  <select id="countAssets" resultType="int">
    SELECT COUNT(*) FROM ${format}_asset WHERE repository_id = #{repositoryId}
        <if test="kind != null"> AND kind = #{kind}</if>
        <if test="filter != null"> AND (${filter})</if>;
  </select>

  <select id="browseAssets" resultMap="assetResult">
    SELECT * FROM ${format}_asset as asset WHERE repository_id = #{repositoryId}
        <if test="continuationToken != null"> AND asset_id > #{continuationToken}</if>
        <if test="kind != null"> AND kind = #{kind}</if>
        <if test="filter != null"> AND (${filter})</if>
    ORDER BY asset_id LIMIT #{limit};
  </select>

  <select id="browseEagerAssetsInRepository" resultMap="assetResultMap">
    WITH assetIds as (
      SELECT asset_id
      FROM ${format}_asset
      WHERE repository_id = #{repositoryId}
      <if test="continuationToken != null">AND asset_id > #{continuationToken}</if>
      ORDER BY asset_id
      LIMIT #{limit})
    SELECT A.*, C.*, B.* FROM ${format}_asset as A
                         INNER JOIN ${format}_component C ON C.component_id = A.component_id
                         INNER JOIN ${format}_asset_blob B ON B.asset_blob_id = A.asset_blob_id
    where A.asset_id in (SELECT asset_id FROM assetIds)
    ORDER BY A.asset_id
  </select>

  <select id="browseAssetsInRepositories" resultMap="assetResult">
    SELECT * FROM ${format}_asset
    WHERE repository_id IN
      <foreach item="repositoryId" index="index" collection="repositoryIds"
               open="(" separator="," close=")">
        #{repositoryId}
      </foreach>
      <if test="continuationToken != null"> AND asset_id > #{continuationToken}</if>
      <if test="kind != null"> AND kind = #{kind}</if>
      <if test="filter != null"> AND (${filter})</if>
    ORDER BY asset_id LIMIT #{limit};
  </select>

  <select id="browseComponentAssets" resultMap="assetResult" parameterType="ComponentData">
    <choose>
      <when test="componentId != null">
        SELECT * FROM ${format}_asset WHERE component_id = #{componentId};
      </when>
      <otherwise>
        SELECT A.* FROM ${format}_asset A INNER JOIN ${format}_component C
            USING (component_id) WHERE <include refid="componentCoordinateMatch"/>;
      </otherwise>
    </choose>
  </select>

  <sql id="regexList">
    <foreach collection="regexList" item="regex" open="AND (" close=")" separator=" OR ">
      path ~ #{regex}
    </foreach>
  </sql>

  <select id="findGreaterThanOrEqualToAddedToRepository" resultType="org.sonatype.nexus.repository.content.store.AssetInfoData">
    SELECT * FROM ${format}_asset a INNER JOIN ${format}_asset_blob ab USING (asset_blob_id)
    WHERE a.repository_id = #{repositoryId}
    <if test="addedToRepository != null"> AND ab.added_to_repository >= #{addedToRepository}</if>
    <include refid="regexList"/>
    <if test="filter != null"> AND (${filter})</if>
    ORDER BY ab.added_to_repository LIMIT #{limit}
  </select>

  <select id="findAddedToRepositoryWithinRange" resultType="org.sonatype.nexus.repository.content.store.AssetInfoData">
    SELECT * FROM ${format}_asset a INNER JOIN ${format}_asset_blob ab USING (asset_blob_id)
    WHERE a.repository_id = #{repositoryId}
    AND ab.added_to_repository >= #{startAddedToRepository} AND ab.added_to_repository &lt; #{endAddedToRepository}
    <include refid="regexList"/>
    <if test="filter != null"> AND (${filter})</if>
    ORDER BY ab.added_to_repository LIMIT #{limit}
  </select>

  <insert id="createAsset" databaseId="PostgreSQL">
    <selectKey keyProperty="asset.assetId" resultType="int" order="BEFORE">
      SELECT NEXTVAL('${format}_asset_asset_id_seq');
    </selectKey>

    INSERT INTO ${format}_asset (asset_id, repository_id, path, kind, component_id, asset_blob_id, last_updated, last_downloaded,
    attributes, asset_blob_size)
    VALUES (#{asset.assetId}, #{asset.repositoryId}, #{asset.path}, #{asset.kind}, #{asset.componentId}, #{asset.assetBlobId},
    #{asset.lastUpdated}, #{asset.lastDownloaded},  #{asset.attributes}, #{asset.assetBlob.blobSize});

    <if test="updateComponentEntityVersion and asset.componentId != null">
      <include refid="componentEntityVersionIncrement"/> WHERE component_id = #{asset.componentId};
    </if>
  </insert>

  <insert id="createAsset" useGeneratedKeys="true" keyProperty="asset.assetId" databaseId="H2">
    INSERT INTO ${format}_asset (repository_id, path, kind, component_id, asset_blob_id, last_updated, last_downloaded,
    attributes, asset_blob_size)
    VALUES (#{asset.repositoryId}, #{asset.path}, #{asset.kind}, #{asset.componentId}, #{asset.assetBlobId},
    #{asset.lastUpdated}, #{asset.lastDownloaded},  #{asset.attributes}, #{asset.assetBlob.blobSize});

    <if test="updateComponentEntityVersion and asset.componentId != null">
      <include refid="componentEntityVersionIncrement"/> WHERE component_id = #{asset.componentId};
    </if>
  </insert>

  <update id="created">
    UPDATE ${format}_asset SET created = #{created}
     WHERE <include refid="assetMatch"/>;
  </update>

  <select id="readAsset" resultMap="assetResult">
    SELECT * FROM ${format}_asset WHERE <include refid="assetMatch"/>;
  </select>

  <select id="readPath" resultMap="assetResult">
    SELECT * FROM ${format}_asset WHERE <include refid="assetPathMatch"/>;
  </select>

  <select id="readPathsFromRepository" resultMap="assetResult">
    SELECT * FROM ${format}_asset WHERE repository_id = #{repositoryId} AND path IN
    <foreach item="path" index="index" collection="paths" open="(" separator="," close=")">
      #{path}
    </foreach>;
  </select>

  <select id="findByBlobRef" resultMap="assetResult">
    SELECT A.* FROM ${format}_asset A INNER JOIN ${format}_asset_blob B USING (asset_blob_id)
    WHERE repository_id = #{repositoryId} AND blob_ref = #{blobRef};
  </select>

  <select id="findByComponentIds" resultType="org.sonatype.nexus.repository.content.store.AssetInfoData" parameterType="java.util.Set">
    SELECT *
    FROM ${format}_asset A
    INNER JOIN ${format}_asset_blob USING (asset_blob_id)
    <if test="assetFilter != null">
      INNER JOIN (
      SELECT
        ap.format,
        ap.repository_id,
        ap.component_id,
        ap.asset_id
      FROM search_assets ap
      <where>
        (${assetFilter})
        <if test="componentIds != null and !componentIds.isEmpty()">
          AND
          <foreach collection="componentIds" item="componentId" index="index" open="ap.component_id IN (" close=")" separator=",">
            #{componentId}
          </foreach>
        </if>
      </where>
      ) content ON '${format}' = content.format AND A.repository_id = content.repository_id AND A.component_id = content.component_id AND A.asset_id = content.asset_id
    </if>
    <if test="assetFilter == null">
      <where>
        <foreach collection="componentIds" item="componentId" index="index" open="A.component_id IN (" close=")" separator=",">
          #{componentId}
        </foreach>
      </where>
    </if>
    ORDER BY A.asset_id
  </select>

  <update id="updateAssetKind">
    <bind name="repositoryId" value="asset.repositoryId"/>
    <bind name="assetId" value="asset.assetId"/>
    <bind name="path" value="asset.path"/>
    <bind name="attributes" value="asset.attributes"/>
    <bind name="kind" value="asset.kind"/>

    <if test="updateComponentEntityVersion">
      <include refid="componentEntityVersionIncrement"/>
          WHERE component_id IN (SELECT component_id FROM ${format}_asset
                                 WHERE <include refid="assetMatch"/> AND kind != #{kind});
    </if>

    UPDATE ${format}_asset SET kind = #{kind}, last_updated = CURRENT_TIMESTAMP
        WHERE <include refid="assetMatch"/> AND kind != #{kind};
  </update>

  <select id="readAssetAttributes" resultType="NestedAttributesMap">
    SELECT attributes FROM ${format}_asset WHERE <include refid="assetMatch"/>;
  </select>

  <update id="updateAssetAttributes">
    <bind name="repositoryId" value="asset.repositoryId"/>
    <bind name="assetId" value="asset.assetId"/>
    <bind name="path" value="asset.path"/>
    <bind name="attributes" value="asset.attributes"/>
    <bind name="kind" value="asset.kind"/>

    <if test="updateComponentEntityVersion">
      <include refid="componentEntityVersionIncrement"/>
          WHERE component_id IN (SELECT component_id FROM ${format}_asset
                                 WHERE <include refid="assetMatch"/> AND attributes != #{attributes});
    </if>

    UPDATE ${format}_asset SET attributes = #{attributes}, last_updated = CURRENT_TIMESTAMP
        WHERE <include refid="assetMatch"/> AND attributes != #{attributes};
  </update>

  <update id="updateAssetBlobLink" parameterType="AssetData">
    <bind name="assetId" value="asset.assetId"/>
    <bind name="repositoryId" value="asset.repositoryId"/>
    <bind name="path" value="asset.path"/>
    <bind name="assetBlobId" value="asset.assetBlobId"/>

    <if test="updateComponentEntityVersion">
      <include refid="componentEntityVersionIncrement"/>
          WHERE component_id IN (SELECT component_id FROM ${format}_asset
                                 WHERE <include refid="assetMatch"/> AND asset_blob_id IS DISTINCT FROM #{assetBlobId});
    </if>

    UPDATE ${format}_asset SET asset_blob_id = #{assetBlobId}, last_updated = CURRENT_TIMESTAMP, asset_blob_size = #{asset.assetBlob.blobSize}
        WHERE <include refid="assetMatch"/> AND asset_blob_id IS DISTINCT FROM #{assetBlobId};
  </update>

  <update id="markAsDownloaded" parameterType="AssetData">
    UPDATE ${format}_asset SET last_downloaded = CURRENT_TIMESTAMP, last_updated = CURRENT_TIMESTAMP
        WHERE <include refid="assetMatch"/>;
  </update>

  <update id="lastDownloaded">
    UPDATE ${format}_asset SET last_downloaded = #{lastDownloaded}
        WHERE <include refid="assetMatch"/>;
  </update>

  <update id="lastUpdated">
    UPDATE ${format}_asset SET last_updated = #{lastUpdated}
      WHERE <include refid="assetMatch"/>;
  </update>

  <delete id="deleteAsset" parameterType="AssetData">
    DELETE FROM ${format}_asset WHERE <include refid="assetMatch"/>;
  </delete>

  <delete id="deleteAssets">
    -- No need to update entity_version for components because
    -- deleting all assets for repository, will
    -- cause the system to delete the associated components
    DELETE FROM ${format}_asset WHERE
        repository_id = #{repositoryId}
        <if test="limit gt 0"> LIMIT #{limit}</if>;
  </delete>

  <delete id="deleteAssets" databaseId="PostgreSQL">
    -- No need to update entity_version for components because
    -- deleting all assets for repository, will
    -- cause the system to delete the associated components
    DELETE FROM ${format}_asset WHERE
        <if test="limit gt 0"> asset_id IN (SELECT asset_id FROM ${format}_asset WHERE </if>
        repository_id = #{repositoryId}
        <if test="limit gt 0"> LIMIT #{limit})</if>;
  </delete>

  <delete id="deleteAssetsByPaths">
    <if test="updateComponentEntityVersion">
      <include refid="componentEntityVersionIncrement"/>
          WHERE component_id IN (
              SELECT component_id FROM ${format}_asset
                  WHERE path IN
                  <foreach item="path" index="index" collection="paths" open="(" separator="," close=")">
                      #{path}
                  </foreach>
              );
    </if>

    DELETE FROM ${format}_asset WHERE repository_id = #{repositoryId} AND path IN
    <foreach item="path" index="index" collection="paths" open="(" separator="," close=")">
      #{path}
    </foreach>;
  </delete>

  <select id="selectNotRecentlyDownloaded" resultType="int">
    SELECT asset_id FROM ${format}_asset
        WHERE repository_id = #{repositoryId} AND component_id IS NULL
        AND last_downloaded &lt;= CURRENT_TIMESTAMP - CAST(#{daysAgo} AS INT) * INTERVAL '1' DAY
        <if test="limit gt 0"> LIMIT #{limit}</if>;
  </select>

  <delete id="purgeSelectedAssets">
    -- Can't update component entity_version as these assets don't have a component
    DELETE FROM ${format}_asset WHERE asset_id = ANY(#{assetIds});
  </delete>

  <delete id="purgeSelectedAssets" databaseId="PostgreSQL">
    -- Can't update component entity_version as these assets don't have a component
    DELETE FROM ${format}_asset WHERE asset_id = ANY(#{assetIds}::int[]);
  </delete>

  <update id="updateEntityVersion" parameterType="AssetData">
    <if test="updateComponentEntityVersion">
      <include refid="componentEntityVersionIncrement"/>
          WHERE component_id = #{componentId};
    </if>
  </update>

  <update id="updateEntityVersions">
    <if test="updateComponentEntityVersion">
      <include refid="componentEntityVersionIncrement"/>
      <where>
          <foreach collection="componentIds" item="componentId" open="component_id IN (" separator="," close=")">
            ${componentId}
          </foreach>
      </where>
    </if>
  </update>

  <select id="selectComponentIds" resultType="int">
    SELECT DISTINCT component_id FROM ${format}_asset
    <where>
      component_id IS NOT NULL AND
      <foreach collection="assetIds" item="assetId" open="asset_id IN (" separator="," close=")">
        ${assetId}
      </foreach>
    </where>
  </select>

  <select id="assetRecordsExist" resultType="boolean">
    SELECT EXISTS (SELECT 1
                   FROM ${format}_asset a
                          JOIN ${format}_asset_blob ab ON ab.asset_blob_id = a.asset_blob_id
                   WHERE (ab.blob_ref = #{blobRef} OR ab.blob_ref in (SELECT blob_ref
                                                                         FROM ${format}_asset a
                                                                                JOIN ${format}_asset_blob ab ON ab.asset_blob_id = a.asset_blob_id
                                                                                JOIN ${format}_content_repository cr
                                                                                     ON a.repository_id = cr.repository_id
                                                                                JOIN repository
                                                                                     ON repository.id = cr.config_repository_id
                                                                         where a.path = #{path}
                                                                           AND repository.name = #{repository}))
             AND (a.component_id IS NULL
        OR a.component_id = (SELECT a.component_id
                             FROM ${format}_component c
                             WHERE a.component_id = c.component_id))
      );

  </select>

  <sql id="componentEntityVersionIncrement">
    UPDATE ${format}_component SET
      entity_version = COALESCE(entity_version, 1) + 1
  </sql>
</mapper>
