<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2008-present Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${namespace}">

  <insert id="createSchema">
    --
    -- each format has an asset blob table which they can extend
    --
    CREATE TABLE IF NOT EXISTS ${format}_asset_blob (
      asset_blob_id INT GENERATED BY DEFAULT AS IDENTITY,
      blob_ref      VARCHAR NOT NULL,
      blob_size     BIGINT NOT NULL,
      content_type  VARCHAR NOT NULL,
      checksums     ${JSON_TYPE} NOT NULL,
      blob_created  TIMESTAMP WITH TIME ZONE NOT NULL,
      created_by    VARCHAR,
      created_by_ip VARCHAR,

      CONSTRAINT pk_${format}_asset_blob_id PRIMARY KEY (asset_blob_id),
      CONSTRAINT uk_${format}_asset_blob_ref UNIQUE (blob_ref)
    );

    ALTER TABLE ${format}_asset_blob ADD COLUMN IF NOT EXISTS added_to_repository  TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP;
    CREATE INDEX IF NOT EXISTS idx_${format}_asset_blob_added_to_repository ON ${format}_asset_blob (added_to_repository);

    <!-- Performance optimisation for cleanup -->
    CREATE INDEX IF NOT EXISTS idx_${format}_asset_blob_created ON ${format}_asset_blob (blob_created);
    --
  </insert>

  <select id="browseAssetBlobs" resultType="AssetBlobData">
    SELECT * FROM ${format}_asset_blob
    <if test="continuationToken != null">
      WHERE asset_blob_id > #{continuationToken}
    </if>
    ORDER BY asset_blob_id LIMIT #{limit};
  </select>

  <select id="browseAssetBlobsWithinDuration" resultType="org.sonatype.nexus.repository.content.AssetReconcileData">
    SELECT AB.blob_ref, R.name as repository, A.path, AB.asset_blob_id FROM ${format}_asset_blob AB
                    JOIN ${format}_asset A ON AB.asset_blob_id = A.asset_blob_id
                    JOIN ${format}_content_repository CR ON CR.repository_id = A.repository_id
                    JOIN repository R ON R.id = cr.config_repository_id
    WHERE AB.added_to_repository BETWEEN #{start} AND #{end}
    <if test="continuationToken != null">
      AND AB.asset_blob_id > #{continuationToken}
    </if>
    ORDER BY AB.asset_blob_id LIMIT #{limit};
  </select>

  <select id="countAssetBlobsWithinDuration" resultType="int">
    SELECT count(1) FROM ${format}_asset_blob
    WHERE added_to_repository BETWEEN #{start} AND #{end}
  </select>

  <select id="browseUnusedAssetBlobs" resultType="AssetBlobData">
    SELECT B.* FROM ${format}_asset_blob B LEFT JOIN ${format}_asset A
        USING (asset_blob_id)
        WHERE A.asset_blob_id IS NULL
        <if test="continuationToken != null">
          AND B.asset_blob_id > #{continuationToken}
        </if>
        <choose>
          <when test="_databaseId == 'PostgreSQL'">
            AND B.blob_created &lt;= NOW() - #{blobCreatedDelayMinute} * INTERVAL '1' MINUTE
          </when>
          <otherwise>
            AND B.blob_created &lt;= DATEADD(MINUTE, 0-#{blobCreatedDelayMinute}, NOW())
          </otherwise>
        </choose>
        LIMIT #{limit};
  </select>

  <insert id="createAssetBlob" useGeneratedKeys="true" keyProperty="assetBlobId" parameterType="AssetBlobData">

    INSERT INTO ${format}_asset_blob (blob_ref, blob_size, content_type, checksums,
                                      blob_created, created_by, created_by_ip
        <if test="addedToRepository != null">, added_to_repository</if>)
        VALUES (#{blobRef}, #{blobSize}, #{contentType}, #{checksums},
          #{blobCreated}, #{createdBy}, #{createdByIp}
        <if test="addedToRepository != null">, #{addedToRepository}</if>);
  </insert>

  <select id="readAssetBlob" resultType="AssetBlobData">
    SELECT * FROM ${format}_asset_blob WHERE blob_ref = #{blobRef};
  </select>

  <delete id="deleteAssetBlob">
    DELETE FROM ${format}_asset_blob WHERE blob_ref = #{blobRef};
  </delete>

  <delete id="deleteAssetBlobBatch" databaseId="PostgreSQL">
    DELETE FROM ${format}_asset_blob WHERE blob_ref = ANY(#{blobRefIds}::varchar[]);
  </delete>

  <delete id="deleteAssetBlobBatch">
    DELETE FROM ${format}_asset_blob WHERE blob_ref = ANY(#{blobRefIds});
  </delete>

  <delete id="deleteAssetBlobWithAsset">
    DELETE
    FROM ${format}_asset
    WHERE asset_blob_id = (SELECT asset_blob_id
                           FROM ${format}_asset_blob
                           WHERE blob_ref = #{blobRef});
    DELETE
    FROM ${format}_asset_blob
    WHERE blob_ref = #{blobRef};
  </delete>

  <update id="setBlobCreated">
    UPDATE ${format}_asset_blob SET blob_created = #{blobCreated}
     WHERE blob_ref = #{blobRef};
  </update>

  <update id="setAddedToRepository">
    UPDATE ${format}_asset_blob SET added_to_repository = #{addedToRepository}
    WHERE blob_ref = #{blobRef};
  </update>

  <update id="setContentType">
    UPDATE ${format}_asset_blob SET content_type = #{contentType}
    WHERE blob_ref = #{blobRef};
  </update>

  <update id="setCreatedBy" parameterType="AssetBlobData">
    UPDATE ${format}_asset_blob SET created_by = #{createdBy}
    WHERE blob_ref = #{blobRef};
  </update>

  <update id="setCreatedByIP" parameterType="AssetBlobData">
    UPDATE ${format}_asset_blob SET created_by_ip = #{createdByIP}
    WHERE blob_ref = #{blobRef};
  </update>

  <update id="setChecksums" parameterType="AssetBlobData">
    UPDATE ${format}_asset_blob SET checksums = #{checksums}
    WHERE blob_ref = #{blobRef};
  </update>

  <select id="browseAssetsWithLegacyBlobRef" resultType="AssetBlobData">
    SELECT * FROM ${format}_asset_blob
    WHERE blob_ref LIKE '%:%' AND blob_ref NOT LIKE '%@%@%'
    <if test="continuationToken != null">
      AND asset_blob_id > #{continuationToken}
    </if>
    ORDER BY asset_blob_id LIMIT #{limit};
  </select>

  <update id="updateBlobRefs" parameterType="org.sonatype.nexus.common.entity.Continuation">
    <foreach collection="assetBlobs" item="assetBlobData" index="index" separator=";">
      UPDATE ${format}_asset_blob
      SET blob_ref = #{assetBlobData.blobRef}
      WHERE asset_blob_id = #{assetBlobData.assetBlobId}
    </foreach>
  </update>

  <update id="updateBlobRef" parameterType="AssetBlobData">
    UPDATE ${format}_asset_blob
    SET blob_ref = #{assetBlobData.blobRef}
    WHERE asset_blob_id = #{assetBlobData.assetBlobId}
  </update>

  <select id="countNotMigratedAssetBlobs" resultType="int">
    SELECT COUNT(*) FROM ${format}_asset_blob
    WHERE blob_ref LIKE '%:%' AND blob_ref NOT LIKE '%@%@%'
  </select>

  <select id="getRepositoryName" resultType="String">
    SELECT r.name
    FROM ${format}_asset a
    JOIN ${format}_asset_blob ab ON ab.asset_blob_id = a.asset_blob_id
    JOIN ${format}_content_repository cr ON cr.repository_id = a.repository_id
    JOIN repository r ON r.id = cr.config_repository_id
    WHERE ab.blob_ref = #{blobRef};
  </select>

  <select id="getPathByBlobRef" resultType="String">
    SELECT a.path
    FROM ${format}_asset a
    JOIN ${format}_asset_blob ab ON ab.asset_blob_id = a.asset_blob_id
    WHERE ab.blob_ref = #{blobRef};
  </select>
  <select id="browseAssetBlobsByBlobRefs" resultType="org.sonatype.nexus.repository.content.AssetReconcileData">
    SELECT AB.blob_ref, R.name as repository, A.path, AB.asset_blob_id FROM ${format}_asset_blob AB
    JOIN ${format}_asset A ON AB.asset_blob_id = A.asset_blob_id
    JOIN ${format}_content_repository CR ON CR.repository_id = A.repository_id
    JOIN repository R ON R.id = cr.config_repository_id
    WHERE AB.blob_ref IN
    <foreach item="item" collection="blobRefs" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>

  <select id="readAssetBlobByPathAndRepository" resultType="AssetBlobData">
    SELECT *
    FROM ${format}_asset_blob
    WHERE blob_ref = #{blobRef}
       or blob_ref in (SELECT blob_ref
                       FROM ${format}_asset a
                              JOIN ${format}_asset_blob ab ON ab.asset_blob_id = a.asset_blob_id
                              JOIN ${format}_content_repository cr
                                   ON a.repository_id = cr.repository_id
                              JOIN repository
                                   ON repository.id = cr.config_repository_id
                       where a.path = #{path}
                         AND repository.name = #{repository});
  </select>
</mapper>
